version: '3.5'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.1
    container_name: stellio-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - default

  kafka:
    image: confluentinc/cp-enterprise-kafka:latest
    container_name: stellio-kafka
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
     # KAFKA_JMX_OPTS: '-Djava.rmi.server.hostname=127.0.1.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9091 -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      #KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
     # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'  
    depends_on:
      - zookeeper
    networks:
      - default
 
  connect:
    image: cnfldemos/cp-server-connect-datagen:0.4.0-6.0.1
    hostname: connect
    container_name: connect
    depends_on:
      - kafka
    networks:
      - default
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.0.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - connect
    networks:
      - default
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
  
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:6.0.1
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - connect
    entrypoint: /bin/sh
    tty: true

  neo4j:
    image: neo4j:4.0
    container_name: stellio-neo4j
    volumes:
      - stellio-neo4j-storage:/data
    environment:
      - NEO4J_dbms_allow__upgrade=${NEO4J_ALLOW_UPGRADE}
      - NEO4J_dbms_default__database=${NEO4J_DEFAULT_DATABASE}
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*"
      - "NEO4J_dbms_security_procedures_whitelist=apoc.*"
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - default

  postgres:
    image: stellio/stellio-timescale-postgis:1.7.2-pg11
    container_name: stellio-postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "POSTGRES_MULTIPLE_DATABASES=${STELLIO_SEARCH_DB_DATABASE},${STELLIO_SEARCH_DB_USER},${STELLIO_SEARCH_DB_PASSWORD}: ${STELLIO_SUBSCRIPTION_DB_DATABASE},${STELLIO_SUBSCRIPTION_DB_USER},${STELLIO_SUBSCRIPTION_DB_PASSWORD}"
      # not sure it is really necessary but it does not break anything ...
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    volumes:
      - stellio-postgres-storage:/var/lib/postgresql/data
    networks:
      - default

  api-gateway:
    container_name: stellio-api-gateway
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
    ports:
      - 8080:8080
    networks:
      - default

  entity-service:
    container_name: stellio-entity-service
    hostname: entity-service
    image: stellio/stellio-entity-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_DATA_NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8082:8082
    depends_on:
      - neo4j
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end

  search-service:
    container_name: stellio-search-service
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SEARCH_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SEARCH_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8085:8085
    depends_on:
      - postgres
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end

  subscription-service:
    container_name: stellio-subscription-service
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SUBSCRIPTION_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SUBSCRIPTION_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8084:8084
    depends_on:
      - postgres
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end

  # prometheus:
  #    image: prom/prometheus:latest
  #    container_name: prometheus
  #    volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #    command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #    expose:
  #     - 9090
  #    ports:
  #     - 9090:9090

  # grafana:
  #    image: grafana/grafana
  #    container_name: grafana
  #    network_mode: host
  #    restart: always
  #    ports:
  #     - 9000:3000
  #    volumes:
  #     - grafana-data:/var/lib/grafana


volumes:
  stellio-neo4j-storage:
  stellio-postgres-storage:
  # grafana-data:
  # prometheus_data: {}


networks:
    default: # this network (app2)
        driver: bridge
    stellio-proxy-net:
        external:
            name: stellio_network
    stellio-proxy-net-end:
            name: stellio_network_end